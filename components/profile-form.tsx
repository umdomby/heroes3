'use client';

import { zodResolver } from '@hookform/resolvers/zod';
import React from 'react';
import { FormProvider, useForm } from 'react-hook-form';
import { TFormRegisterValues, formRegisterSchema } from './modals/auth-modal/forms/schemas';
import { User } from '@prisma/client';
import toast from 'react-hot-toast';
import { signOut } from 'next-auth/react';
import { Container } from './container';
import { Title } from './title';
import { FormInput } from './form';
import { Button } from '@/components/ui';
import {referralGet, updateUserInfo} from '@/app/actions';

interface Props {
    data: User;
}

export const ProfileForm: React.FC<Props> = ({ data }) => {
    const form = useForm({
        resolver: zodResolver(formRegisterSchema),
        defaultValues: {
            fullName: data.fullName,
            email: data.email,
            password: '',
            confirmPassword: '',
        },
    });

    const onSubmit = async (data: TFormRegisterValues) => {
        try {
            await updateUserInfo({
                email: data.email,
                fullName: data.fullName,
                password: data.password,
            });

            toast.error('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã üìù', {
                icon: '‚úÖ',
            });
        } catch (error) {
            return toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', {
                icon: '‚ùå',
            });
        }
    };

    const onClickSignOut = () => {
        signOut({
            callbackUrl: '/',
        });
    };

    const referral = async () => {
        try {
         await referralGet();
        }catch (e) {
            console.log(e)
        }
        return data
    }
    console.log(referral)
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data.loginHistory —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
    const loginHistory = Array.isArray(data.loginHistory) ? data.loginHistory : [];


    return (
        <Container className="w-[98%]">
            <div className="flex flex-col gap-3 w-full mt-10">
                <div className="flex flex-col md:flex-row gap-3 w-full">
                    {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –§–æ—Ä–º–∞ */}
                    <div className="w-full md:w-1/2 p-4 rounded-lg">
                        <Title text={`–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ | #${data.id}`} size="md" className="font-bold" />

                        <FormProvider {...form}>
                            <form onSubmit={form.handleSubmit(onSubmit)}>
                                <FormInput name="email" label="E-Mail" required />
                                <FormInput name="fullName" label="–ü–æ–ª–Ω–æ–µ –∏–º—è" required />

                                <FormInput type="password" name="password" label="–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å" required />
                                <FormInput type="password" name="confirmPassword" label="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å" required />

                                <Button disabled={form.formState.isSubmitting} className="text-base mt-10" type="submit">
                                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                                </Button>

                                <Button
                                    onClick={onClickSignOut}
                                    variant="secondary"
                                    disabled={form.formState.isSubmitting}
                                    className="text-base"
                                    type="button"
                                >
                                    –í—ã–π—Ç–∏
                                </Button>
                            </form>
                        </FormProvider>
                    </div>

                    {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ */}
                    <div className="w-full md:w-1/2 p-4 rounded-lg">
                        <Title text="–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤" size="md" className="font-bold mb-4" />
                        {/*<Title text="–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞–∫–∫–∞—É–Ω—Ç–æ–≤ :) –•–æ—Ä–æ—à–∏—Ö —Å—Ç–∞–≤–æ–∫!" size="xs" className="font-bold mb-4" />*/}
                        {loginHistory.length > 0 ? (
                            <div className="space-y-1">
                                {loginHistory.map((entry: any, index: number) => (
                                    <div key={index} className="p-1 border border-gray-300 rounded-lg">
                                        <p><strong>IP:</strong> {entry.ip}, {new Date(entry.lastLogin).toLocaleString()}, <strong>VPN:</strong> {entry.vpn ? '–î–∞' : '–ù–µ—Ç'}, {entry.loginCount}</p>
                                    </div>
                                ))}
                            </div>
                        ) : (
                            <p>–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.</p>
                        )}
                    </div>
                    {/* IP address */}
                    <div className="w-full md:w-1/2 p-4 rounded-lg">
                            {/*const referral*/}
                    </div>
                </div>
            </div>
        </Container>
    );
};
